Nickel index of the Feynman diagram: e12|23|3|e|:0B_bB_vv|vB_bb|bV|0b| 

Diagram symmetry factor: 1 

Diagram description start.

Propagators (lines) in the diagram: 
{'line 0': [(0, 1), ['b', 'B']], 'line 1': [(0, 2), ['v', 'v']], 'line 2': [(1, 2), ['v', 'B']], 'line 3': [(1, 3), ['b', 'b']], 'line 4': [(2, 3), ['b', 'V']]} 
Notation for line n: [(vertex_1, vertex_2), (field_flows_out_of_vertex_1, field_flows_into_vertex_2)]

Loops in the diagram for a given internal momentum: 
[('line 0', 'line 1', 'line 2'), ('line 2', 'line 3', 'line 4')] 

Momentum propagating along the lines: 
{'line 0': -k + p, 'line 1': k, 'line 2': -k + p - q, 'line 3': q, 'line 4': p - q}

Frequency propagating along the lines: 
{'line 0': w - w_k, 'line 1': w_k, 'line 2': w - w_k - w_q, 'line 3': w_q, 'line 4': w - w_q}

Diagram integrand: 
PbB(-k, -w_k, 1, 3)*PbV(-q, -w_q, 8, 11)*Pbb(q, w_q, 5, 10)*PvB(-k - q, -w_k - w_q, 4, 7)*Pvv(k, w_k, 2, 6)*vertex_factor_Bbv(-k, 3, 5, 4)*vertex_factor_Bbv(p, 0, 1, 2)*vertex_factor_Bbv(-k - q, 7, 8, 6)*vertex_factor_Vbb(-q, 11, 9, 10)

The calculation of the integrand is divided into two stages: 
1. The calculation of the tensor structure T_ij 
2. The calculation of the scalar part F 
See file General_notation.txt for details.

Expression for the scalar function F: 
A**4*(-sc_prod(B, k) - sc_prod(B, q))*D_v(k)*D_v(q)*alpha(nuo, k, w_k)*beta(nuo, k, w_k)*beta_star(nuo, k, w_k)*sc_prod(B, q)**3/(xi(k, w_k)**2*xi(q, w_q)**2*xi(k + q, w_k + w_q)*xi_star(k, w_k)*xi_star(q, w_q))

Expression for the tensor function T_ij (numbers for vector indices instead of alphabetic [1]): 
-(-kd(11, 9)*mom(q, 10) - kd(11, 10)*mom(q, 9))*(I*rho*H(k, 2, 6) + P(k, 2, 6))*(I*rho*H(q, 5, 10) + P(q, 5, 10))*(-A*(-mom(k, 8) - mom(q, 8))*kd(7, 6) + (-mom(k, 6) - mom(q, 6))*kd(7, 8))*(-A*kd(0, 2)*mom(p, 1) + kd(0, 1)*mom(p, 2))*(A*kd(3, 4)*mom(k, 5) - kd(3, 5)*mom(k, 4))*P(k, 1, 3)*P(q, 8, 11)*P(k + q, 4, 7)

Scalar part of the propagator product  in a Wolfram Mathematica-friendly format: 
PbB[-k, -w_k]*Pvv[k, w_k]*PvB[-k - q, -w_k - w_q]*Pbb[q, w_q]*PbV[-q, -w_q]

The diagram is UV-convergent: 
True

Diagram description end.

Diagram integrand calculation start.

Calculation of F. 

The expression for F after integration over frequencies: 
-4*pi**2*(-A**4*(-sc_prod(B, k) - sc_prod(B, q))*D_v(k)*D_v(q)*alpha(nuo, k, -f_1(B, nuo, k))*beta(nuo, k, -f_1(B, nuo, k))*beta(nuo, k, f_1(B, nuo, k))*sc_prod(B, q)**3/(16*(-f_1(B, nuo, k) - f_2(B, nuo, k))**2*(f_1(B, nuo, k) - f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, q))**2*(f_1(B, nuo, q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_1(B, nuo, k + q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_2(B, nuo, k + q))*f_1(B, nuo, k)**2*f_1(B, nuo, q)**2) - A**4*(-sc_prod(B, k) - sc_prod(B, q))*D_v(k)*D_v(q)*alpha(nuo, k, -f_1(B, nuo, k))*beta(nuo, k, -f_1(B, nuo, k))*beta(nuo, k, f_1(B, nuo, k))*sc_prod(B, q)**3/(16*(-f_1(B, nuo, k) - f_2(B, nuo, k))**2*(f_1(B, nuo, k) - f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, q))**2*(-f_1(B, nuo, q) + f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_1(B, nuo, k + q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*f_1(B, nuo, k)**2*f_2(B, nuo, q)**2) - A**4*(-sc_prod(B, k) - sc_prod(B, q))*D_v(k)*D_v(q)*alpha(nuo, k, -f_2(B, nuo, k))*beta(nuo, k, -f_2(B, nuo, k))*beta(nuo, k, f_2(B, nuo, k))*sc_prod(B, q)**3/(16*(-f_1(B, nuo, k) - f_2(B, nuo, k))**2*(-f_1(B, nuo, k) + f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, q))**2*(f_1(B, nuo, q) - f_2(B, nuo, q))*(-f_1(B, nuo, q) - f_1(B, nuo, k + q) - f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, k) - f_2(B, nuo, k + q))*f_1(B, nuo, q)**2*f_2(B, nuo, k)**2) - A**4*(-sc_prod(B, k) - sc_prod(B, q))*D_v(k)*D_v(q)*alpha(nuo, k, -f_2(B, nuo, k))*beta(nuo, k, -f_2(B, nuo, k))*beta(nuo, k, f_2(B, nuo, k))*sc_prod(B, q)**3/(16*(-f_1(B, nuo, k) - f_2(B, nuo, k))**2*(-f_1(B, nuo, k) + f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, q))**2*(-f_1(B, nuo, q) + f_2(B, nuo, q))*(-f_1(B, nuo, k + q) - f_2(B, nuo, k) - f_2(B, nuo, q))*(-f_2(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*f_2(B, nuo, k)**2*f_2(B, nuo, q)**2)) 

The previous expression in a Wolfram Mathematica-friendly format: 
-4*Pi**2*(-A**4*(-sc_prod[B, k] - sc_prod[B, q])*D_v[k]*D_v[q]*alpha[nuo, k, -f_1[B, nuo, k]]*beta[nuo, k, -f_1[B, nuo, k]]*beta[nuo, k, f_1[B, nuo, k]]*sc_prod[B, q]**3/(16*(-f_1[B, nuo, k] - f_2[B, nuo, k])**2*(f_1[B, nuo, k] - f_2[B, nuo, k])*(-f_1[B, nuo, q] - f_2[B, nuo, q])**2*(f_1[B, nuo, q] - f_2[B, nuo, q])*(-f_1[B, nuo, k] - f_1[B, nuo, q] - f_1[B, nuo, k + q])*(-f_1[B, nuo, k] - f_1[B, nuo, q] - f_2[B, nuo, k + q])*f_1[B, nuo, k]**2*f_1[B, nuo, q]**2) - A**4*(-sc_prod[B, k] - sc_prod[B, q])*D_v[k]*D_v[q]*alpha[nuo, k, -f_1[B, nuo, k]]*beta[nuo, k, -f_1[B, nuo, k]]*beta[nuo, k, f_1[B, nuo, k]]*sc_prod[B, q]**3/(16*(-f_1[B, nuo, k] - f_2[B, nuo, k])**2*(f_1[B, nuo, k] - f_2[B, nuo, k])*(-f_1[B, nuo, q] - f_2[B, nuo, q])**2*(-f_1[B, nuo, q] + f_2[B, nuo, q])*(-f_1[B, nuo, k] - f_1[B, nuo, k + q] - f_2[B, nuo, q])*(-f_1[B, nuo, k] - f_2[B, nuo, q] - f_2[B, nuo, k + q])*f_1[B, nuo, k]**2*f_2[B, nuo, q]**2) - A**4*(-sc_prod[B, k] - sc_prod[B, q])*D_v[k]*D_v[q]*alpha[nuo, k, -f_2[B, nuo, k]]*beta[nuo, k, -f_2[B, nuo, k]]*beta[nuo, k, f_2[B, nuo, k]]*sc_prod[B, q]**3/(16*(-f_1[B, nuo, k] - f_2[B, nuo, k])**2*(-f_1[B, nuo, k] + f_2[B, nuo, k])*(-f_1[B, nuo, q] - f_2[B, nuo, q])**2*(f_1[B, nuo, q] - f_2[B, nuo, q])*(-f_1[B, nuo, q] - f_1[B, nuo, k + q] - f_2[B, nuo, k])*(-f_1[B, nuo, q] - f_2[B, nuo, k] - f_2[B, nuo, k + q])*f_1[B, nuo, q]**2*f_2[B, nuo, k]**2) - A**4*(-sc_prod[B, k] - sc_prod[B, q])*D_v[k]*D_v[q]*alpha[nuo, k, -f_2[B, nuo, k]]*beta[nuo, k, -f_2[B, nuo, k]]*beta[nuo, k, f_2[B, nuo, k]]*sc_prod[B, q]**3/(16*(-f_1[B, nuo, k] - f_2[B, nuo, k])**2*(-f_1[B, nuo, k] + f_2[B, nuo, k])*(-f_1[B, nuo, q] - f_2[B, nuo, q])**2*(-f_1[B, nuo, q] + f_2[B, nuo, q])*(-f_1[B, nuo, k + q] - f_2[B, nuo, k] - f_2[B, nuo, q])*(-f_2[B, nuo, k] - f_2[B, nuo, q] - f_2[B, nuo, k + q])*f_2[B, nuo, k]**2*f_2[B, nuo, q]**2)) 

The expression for F after reduction to a common denominator: 
pi**2*A**4*(-sc_prod(B, k) - sc_prod(B, q))*((-f_1(B, nuo, k) + f_2(B, nuo, k))*(-f_1(B, nuo, q) + f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_1(B, nuo, k + q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*(-f_1(B, nuo, q) - f_1(B, nuo, k + q) - f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, k) - f_2(B, nuo, k + q))*(-f_1(B, nuo, k + q) - f_2(B, nuo, k) - f_2(B, nuo, q))*(-f_2(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*alpha(nuo, k, -f_1(B, nuo, k))*beta(nuo, k, -f_1(B, nuo, k))*beta(nuo, k, f_1(B, nuo, k))*f_2(B, nuo, k)**2*f_2(B, nuo, q)**2 + (-f_1(B, nuo, k) + f_2(B, nuo, k))*(f_1(B, nuo, q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_1(B, nuo, k + q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_2(B, nuo, k + q))*(-f_1(B, nuo, q) - f_1(B, nuo, k + q) - f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, k) - f_2(B, nuo, k + q))*(-f_1(B, nuo, k + q) - f_2(B, nuo, k) - f_2(B, nuo, q))*(-f_2(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*alpha(nuo, k, -f_1(B, nuo, k))*beta(nuo, k, -f_1(B, nuo, k))*beta(nuo, k, f_1(B, nuo, k))*f_1(B, nuo, q)**2*f_2(B, nuo, k)**2 + (f_1(B, nuo, k) - f_2(B, nuo, k))*(-f_1(B, nuo, q) + f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_1(B, nuo, k + q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_2(B, nuo, k + q))*(-f_1(B, nuo, k) - f_1(B, nuo, k + q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*(-f_1(B, nuo, k + q) - f_2(B, nuo, k) - f_2(B, nuo, q))*(-f_2(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*alpha(nuo, k, -f_2(B, nuo, k))*beta(nuo, k, -f_2(B, nuo, k))*beta(nuo, k, f_2(B, nuo, k))*f_1(B, nuo, k)**2*f_2(B, nuo, q)**2 + (f_1(B, nuo, k) - f_2(B, nuo, k))*(f_1(B, nuo, q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_1(B, nuo, k + q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_2(B, nuo, k + q))*(-f_1(B, nuo, k) - f_1(B, nuo, k + q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*(-f_1(B, nuo, q) - f_1(B, nuo, k + q) - f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, k) - f_2(B, nuo, k + q))*alpha(nuo, k, -f_2(B, nuo, k))*beta(nuo, k, -f_2(B, nuo, k))*beta(nuo, k, f_2(B, nuo, k))*f_1(B, nuo, k)**2*f_1(B, nuo, q)**2)*D_v(k)*D_v(q)*sc_prod(B, q)**3/(4*(-f_1(B, nuo, k) - f_2(B, nuo, k))**2*(-f_1(B, nuo, k) + f_2(B, nuo, k))*(f_1(B, nuo, k) - f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, q))**2*(-f_1(B, nuo, q) + f_2(B, nuo, q))*(f_1(B, nuo, q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_1(B, nuo, k + q))*(-f_1(B, nuo, k) - f_1(B, nuo, q) - f_2(B, nuo, k + q))*(-f_1(B, nuo, k) - f_1(B, nuo, k + q) - f_2(B, nuo, q))*(-f_1(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*(-f_1(B, nuo, q) - f_1(B, nuo, k + q) - f_2(B, nuo, k))*(-f_1(B, nuo, q) - f_2(B, nuo, k) - f_2(B, nuo, k + q))*(-f_1(B, nuo, k + q) - f_2(B, nuo, k) - f_2(B, nuo, q))*(-f_2(B, nuo, k) - f_2(B, nuo, q) - f_2(B, nuo, k + q))*f_1(B, nuo, k)**2*f_1(B, nuo, q)**2*f_2(B, nuo, k)**2*f_2(B, nuo, q)**2) 

Preparation for numerical integration for the integrand's scalar part consists in carrying out a replacing of variables k, q --> B*k/nuo, B*q/nuo, after which UV-convergent part of the diagram is divided into a dimensional factor C_F and a function F1 depending only on uo and integration variables k and q: F = C_F*F1.

1. In case of UV-convergent diagrams UV-convergent part is equal to F.
1. In case of UV-divergent diagrams UV-convergent part is equal to F - F(B = 0) [1].

The expression for F1 after momentums replacing: 
16*k**(-d - 2*eps + 4)*q**(-d - 2*eps + 4)*z_q**3*(-k*z_k - q*z_q)*((k**2*(uo + 1) - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2))**2*(q**2*(uo + 1) - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2))**2*sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)*sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)*(k**2*uo - k**2*(uo + 1)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(k**2*uo + k**2*(uo + 1)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + k**2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)/16 - (k**2*(uo + 1) - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2))**2*(q**2*(uo + 1) + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2))**2*sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)*sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)*(k**2*uo - k**2*(uo + 1)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(k**2*uo + k**2*(uo + 1)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + k**2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)/16 - (k**2*(uo + 1) + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2))**2*(q**2*(uo + 1) - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2))**2*sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)*sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)*(k**2*uo - k**2*(uo + 1)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(k**2*uo + k**2*(uo + 1)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + k**2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)/16 + (k**2*(uo + 1) + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2))**2*(q**2*(uo + 1) + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2))**2*sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)*sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)*(k**2*uo - k**2*(uo + 1)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(k**2*uo + k**2*(uo + 1)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + k**2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)/16)*(k**2*(uo + 1)/2 + q**2*(uo + 1)/2 + (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + q**2*(uo + 1)/2 + (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + q**2*(uo + 1)/2 + (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + q**2*(uo + 1)/2 + (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + q**2*(uo + 1)/2 + (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + q**2*(uo + 1)/2 + (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + q**2*(uo + 1)/2 + (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)*(k**2*(uo + 1)/2 + q**2*(uo + 1)/2 + (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)/(k**4*q*(uo + 1)**4*(k**2*(uo + 1) - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2))**2*(k**2*(uo + 1) + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2))**2*(q**2*(uo + 1) - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2))**2*(q**2*(uo + 1) + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2))**2*(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)*(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)**2*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)**2*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)**2*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 - sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)**2*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)**2*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 - sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)**2*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 - sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)**2*(-k**2*(uo + 1)/2 - q**2*(uo + 1)/2 - (uo + 1)*(k**2 + 2*k*q*z + q**2)/2 + sqrt(-4*A*(k*z_k + q*z_q)**2 + (uo - 1)**2*(k**2 + 2*k*q*z + q**2)**2)/2 + sqrt(-4*A*k**2*z_k**2 + k**4*(uo - 1)**2)/2 + sqrt(-4*A*q**2*z_q**2 + q**4*(uo - 1)**2)/2)**2) 

The expression for common C_F after momentums replacing: 
4*pi**2*A**4*go**2*nuo**11*(B/nuo)**(-2*d - 4*eps + 8)/B**10 
