A detailed description of most of the notation introduced in this program can be found in the articles:
[1] Adzhemyan, L.T., Vasil'ev, A.N., Gnatich, M. Turbulent dynamo as spontaneous symmetry breaking. 
Theor Math Phys 72, 940-950 (1987). https://doi.org/10.1007/BF01018300 
[2] Hnatic, M., Honkonen, J., Lucivjansky, T. Symmetry Breaking in Stochastic Dynamics and Turbulence. 
Symmetry 2019, 11, 1193. https://doi.org/10.3390/sym11101193 
[3] D. Batkovich, Y. Kirienko, M. Kompaniets S. Novikov, GraphState - A tool for graph identification
and labelling, arXiv:1409.8227, program repository: https://bitbucket.org/mkompan/graph_state/downloads
 
In general, the contribution of each diagram corresponding to the Nickel index from the file 
Two-loop MHD diagrams.txt can be symbolically written as

Diagram = s*int(dmu*integrand), integrand = T_ij*F,

where s is a symmetry factor of the diagram, dmu is a measure of integration, and T_ij*F is the integrand that 
this program is dedicated to calculating. The calculation of the integrand is divided into two stages: 
the calculation of the tensor structure T_ij and the calculation of the scalar part F. The structure T_ij includes 
tensor structures from each propagator (ie the operators P_ij, P_ij + i*rho*H_ij, as well as vertex factors), 
F contains everything that remains from the product of propagators.

See below for further explanation.

General remarks about the procedure for restoring the diagram by the Nickel index: 
0. Detailed information regarding the definition of the Nickel index can be found in [3]. 
1. Fields: v is a random vector velocity field, b is a vector magnetic field, 
B and V are auxiliary vector fields (according to Janssen - De Dominicis approach).
2. List of non-zero propagators: ['vv', 'vV', 'Vv', 'bB', 'Bb', 'vb', 'bv', 'bb', 'Vb', 'bV', 'Bv', 'vB']
3. Momentums and frequencies: (p, w) denotes external (inflowing to diagram through field B) momentum 
and frequency, [k, q] and [w_k, w_q] denotes momentums and frequencies flowing along the lines containing 
the kernel D_v.
4. Vertices in the diagram are numbered in ascending order from 0 to 3 in the order 
they occur in the Nickel index.
5. Loop structure: for technical reasons, it is convenient to assign new momentums [k, q] and frequencies 
[w_k, w_q] to propagators containing D_v kernel (see definition below): 
['vv', 'vb', 'bv', 'bb']
The first loop corresponds to the pair (k, w_k) and the second to the pair (q, w_q).

Definitions of non-zero elements of the propagator matrix in the momentum-frequency representation:
 
Pvv(k, w, i, j) = R(k, i, j)*D_v(k)*beta(nuo, k, w)*beta_star(nuo, k, w)/(xi(k, w)*xi_star(k, w))
PVv(k, w, i, j) = P(k, i, j)*beta(nuo, k, w)/xi(k, w)
PVv(k, w, i, j) = P(k, i, j)*beta(nuo, k, w)/xi(k, w)
PbB(k, w, i, j) = P(k, i, j)*alpha_star(nuo, k, w)/xi_star(k, w)
PBb(k, w, i, j) = P(k, i, j)*alpha(nuo, k, w)/xi(k, w)
Pvb(k, w, i, j) = -I*A*R(k, i, j)*D_v(k)*beta_star(nuo, k, w)*sc_prod(B, k)/(xi(k, w)*xi_star(k, w))
Pbv(k, w, i, j) = I*A*R(k, i, j)*D_v(k)*beta(nuo, k, w)*sc_prod(B, k)/(xi(k, w)*xi_star(k, w))
Pbb(k, w, i, j) = A**2*R(k, i, j)*D_v(k)*sc_prod(B, k)**2/(xi(k, w)*xi_star(k, w))
PVb(k, w, i, j) = -I*A*P(k, i, j)*sc_prod(B, k)/xi(k, w)
PbV(k, w, i, j) = I*A*P(k, i, j)*sc_prod(B, k)/xi_star(k, w)
PBv(k, w, i, j) = -I*A*P(k, i, j)*sc_prod(B, k)/xi(k, w)
PvB(k, w, i, j) = I*A*P(k, i, j)*sc_prod(B, k)/xi_star(k, w)

Vertex factors:

vertex_factor_Bbv(k, index_B, index_b, index_v) = I * (mom(k, index_v) * kd(index_B, index_b) -
    A * mom(k, index_b) * kd(index_B, index_v))
vertex_factor_Vvv(k, index_V, index1_v, index2_v) = I * (mom(k, index1_v) * kd(index_V, index2_v) +
    mom(k, index2_v) * kd(index_V, index1_v))
vertex_factor_Vbb(k, index_V, index1_b, index2_b) = -I * (mom(k, index1_b) * kd(index_V, index2_b) +
    mom(k, index2_b) * kd(index_V, index1_b))

Here arguments i, j, l are indices of corresonding fields in corresponding vertex.

Used notation: 

Hereinafter, unless otherwise stated, the symbol k denotes the vector modulus. 
A parametrizes the model type: model of linearized NavierStokes equation (A = -1), kinematic MHD turbulence 
(A = 1), and model of a passive vector field advected by a given turbulent environment (A = 0). 
Index s reserved to denote the component of the external momentum p, d the spatial dimension of the system 
(its physical value is equal to 3), function sc_prod(. , .) denotes the standard dot product of vectors in R**d
(its arguments are always vectors!). 

Function mom(k, i) denotes i-th component of vector k (i = 1, ..., d), functions kd(i, j) and lcs(i, j, l) 
denotes the Kronecker delta and Levi-Civita symbols.

The rest of the model numeric parameters are nuo -- renormalized kinematic viscosity, go -- coupling constant,
mu -- renormalization mass, uo -- renormalized reciprocal magnetic Prandtl number, rho -- gyrotropy 
parameter (abs(rho) < 1), and eps determines a degree of model deviation from logarithmicity (0 < eps =< 2).

D_v(k) = go*k**(-d - 2*eps + 4)*nuo**3
alpha(nuo, k, w) = k**2*nuo + I*w
alpha_star(nuo, k, w) = k**2*nuo - I*w
beta(nuo, k, w) = k**2*nuo*uo + I*w
beta_star(nuo, k, w) = k**2*nuo*uo - I*w
f_1(B, nuo, k) = I*(k**2*nuo*(uo + 1) + sqrt(-4*A*sc_prod(B, k)**2 + k**4*nuo**2*(uo - 1)**2))/2
f_2(B, nuo, k) = I*(k**2*nuo*(uo + 1) - sqrt(-4*A*sc_prod(B, k)**2 + k**4*nuo**2*(uo - 1)**2))/2
chi_1(k, w) = w - f_1(B, nuo, k)
chi_2(k, w) = w - f_2(B, nuo, k)
xi(k, w) = -chi_1(k, w)*chi_2(k, w)
xi_star(k, w) = -chi_1(k, -w)*chi_2(k, -w)

Remarks about the integration procedure:
0. We assume that the integration in the diagram is carried out in the spherical coordinate system 
for vectors k and q: 

k_1 = k*sin(theta_1)*cos(phi_1), 
k_2 = k*sin(theta_1)*sin(phi_1), 
k_3 = k*cos(theta_1), 
q_1 = k*sin(theta_2)*cos(phi_2), 
q_2 = k*sin(theta_2)*sin(phi_2), 
q_3 = k*cos(theta_2), 

where theta_1, theta_2 are angles between vector B and k, or q respectively. Vector B is a vector 
proportional to the magnetic induction. Corresponding measure of integration is: 

dmu = 2*(pi - u)*k**2*q**2*sin(theta_1)*sin(theta_2)*dk*dq*dtheta_1*dtheta_2*du, 

where 2*u = (phi_2 - phi_1) (all diagrams depends only from cos(phi_1 - phi_2)). 
We also introduce following notation for cosines: 

z = cos(angle between k and q) = sin(theta_1)*sin(theta_2)*cos(phi_1 - phi_2) + cos(theta_1)*cos(theta_2), 
z_k = cos(theta_1), 
z_q = cos(theta_2).

1. After the replacement of arguments k, q --> |B|*k/nuo, |B|*q/nuo, the expression for the diagram is converted 
as follows 

Diagram = s*C*int(dmu*T1_ij*F1), T_ij = C_T*T1_ij, F = C_F*F1, C = C_mu*C_T*C_F, C_mu = (|B|/nuo)**6, C_T = (|B|/nuo)**2

where F1 = F1(k, q, z, z_k, z_q, uo) is a function that depends only on the parameter uo and integration variables, 
and C_F is a dimensional multiplier depending on |B|, nuo and all other dimensional parameters.
